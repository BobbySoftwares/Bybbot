import discord

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

import jukebox
import swag
import time
import math
import asyncio
import random

############################## INITIALISATION ################################################

print("Lancement du jukebox...\n")
bot_jukebox = jukebox.jukebox("sounds") # On indique le fichier qui contient tout les sons, ici "sounds"
print(bot_jukebox.jukebox_stat())       # Affichage du nombre de son enregistr√© par famille (aoe, kaa, duke...)

print("Initialisation de la Banque Centrale du $wag...\n")
bot_SwagBank = swag.SwagBank()

print("Lancement du bot...")

ROLE_ID_BOBBY_SWAG = 846736189310238751     #Identifiant unique du r√¥le "Le bobby swag" 
GUILD_ID_BOBBYCRATIE = 487244765558210580   #ID unique du serveur Bobbycratie

FORBES_CHANNEL_ID_BOBBYCRATIE = 848313360306536448  #ID unique du canal du swag forbes
COMMAND_CHANNEL_ID_BOBBYCRATIE = 848302082150760508 #ID unique du canal swag-command
 
#Liste des √©moji utilis√© pour le swag-forbes
EMOJI_NUL = ['ü§®','üòê','üòë','üôÑ','üò£','üò•','üò´','üòí','üôÉ','üò≤','üôÅ','üòñ','üòû','üòü','üò§','üò©','üò≠','üò¢','üò∞','üò±','ü§™','üòµ','ü•¥','üò†','ü§Æ','ü§ß','ü•∫','üôà','üôä','üçû','ü§è']

#Mise √† jour des droit du bot, qui lui permet d'avoir la liste enti√®re des membres d'un serveur
intents = discord.Intents.default()
intents.members = True

client = discord.Client(intents=intents) #Lancement du client

############################## Fonctions utilitaire ##########################################

def formatNumber(n):
    """ Fonction qui permet de rajouter des espaces fin entre chaque millier d'un nombre
        100000 -> 100 000

    Args:
        n (int/float): le nombre √† formater

    Returns:
        String: le nombre, format√©
    """
    return format(n,',').replace(",","‚ÄØ")

def chucks(lst, n):
    """Permet de subdiviser des listes en plusieurs sous-liste de m√™me taille.

    Args:
        lst (liste): La liste √† subdiviser
        n (int): taille de chaque sous-liste
    Yields:
        list: liste des sous-listes
    """
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

async def connect_to_chan(chanToGo):
    """ Fonction utilis√© par le bot pour se connecter sur un canal vocal,
        En prenant en compte toutes les situations possibles

    Args:
        chanToGo (VoiceChannel): Le canal vocal o√π il faut aller

    Returns:
        VoiceClient: l'instance de connexion vocale que le bot utilise pour le canal vocal chanToGo
    """
    for actualVoiceClient in client.voice_clients:
        if actualVoiceClient.guild == chanToGo.guild:
            if actualVoiceClient.channel == chanToGo:
                return actualVoiceClient
            else:
                #close the old voiceClient in wrong channel, and move to the new channel
                await actualVoiceClient.move_to(chanToGo)
                return actualVoiceClient
    
    #If no VoiceClient is already set, create a new one
    return await chanToGo.connect()

def getGuildMemberName(general_username,guild,return_display_name=True):
    """ Permet de r√©cup√©rer l'objet User en donnant le nom d'utilisateur g√©n√©ral discord de quelqu'un

        Le nom d'utilisateur g√©n√©ral est le pseudo sous la forme GlitchiKun#4950 (celui qui est impossible de changer)

        Si l'option return_display_name est √† True, la fonction renvoie directement le nom d'utilisateur local au serveur
        (Exemple : pour GlitchiKun#4950, son nom d'utilisateur local sur la Bobbycratie est Bobby Ing√©nieur)

    Args:
        general_username (String): Nom d'utilisateur g√©n√©ral (GlitchiKun#4950)
        guild (Guild): Serveur discord
        return_display_name (bool, optional) :  True -> renvoie un string : le nom d'utilisateur local (Bobby Ing√©nieur).
                                                False -> renvoie l'objet User correspondant √† l'utilisateur

    Returns:
        User ou String: Objet User, ou nom local de l'utilisateur (en fonction du return_display_name)
    """

    ## Cette fonction est utilis√© pour l'historique, il ne faut donc pas prendre en compte $wag mine et $style generator
    if general_username == "$wag Mine ‚õè" or general_username == "$tyle Generator Inc.":
        return general_username 
    split_username = general_username.split("#")
    user = discord.utils.get(guild.members, name=split_username[0], discriminator = split_username[1])
    if user == None:
        return general_username

    if return_display_name:
        return user.display_name
    else:
        return user

############################## Fonction ajout√© pour le Jukebox  ##############################

def well_agligned_jukebox_tab(lst_sound, begginner_carac,end_carac):
    """ Fonction utilis√© pour la fonctionnalit√© jukebox.
        Affiche plusieurs ligne de son (num√©ro, [tag], transcription) correctement allign√©es

    Args:
        lst_sound (Liste de sons (de type jukebox.son)): Liste comportant les sons √† afficher
        begginner_carac (String): Caract√®re √† rajouter √† chaque d√©but de ligne (utile si on veut utiliser les couleurs)
        end_carac (String): Caract√®re √† rajouter √† chaque fin de ligne

    Returns:
        String : Une cha√Æne de caract√®re √† afficher
    """
    #D√©termination de la cha√Æne de caract√®re la plus longue pour les tags
    maxsize = 0
    for sound in lst_sound:
        tagsize = len(str(sound.tags).replace("'",""))
        if tagsize > maxsize:
            maxsize = tagsize
    
    codeblock = "" # initialisation de la cha√Æne de caract√®re √† renvoyer
    for sound in lst_sound:
        if maxsize > 2:
            codeblock += begginner_carac + str(sound.tags).replace("'","").ljust(maxsize) + " || " + str(sound.transcription) + end_carac + "\n"
        else: ## Si il n'y a que des sons sans aucun tag dans le tableau
            codeblock += begginner_carac + str(sound.transcription) + end_carac + "\n"

    return codeblock

############################## Fonctions ajout√© pour le $wag #################################

async def updateForbesClassement(guild):
    """Met √† jour le classement Forbes dans le #swag-forbes

    Args:
        guild (Guild): Guilde o√π √©crire le classement (Ne sert √† rien en soit, car on le fait toujours que en bobbycratie pour le moment)
    """

    Personne_par_message = 15 #Chaque message du $wag forbes ne contient que 15 places

    #R√©cup√©ration du canal #$wag-forbes
    channelForbes = guild.get_channel(FORBES_CHANNEL_ID_BOBBYCRATIE)

    #R√©cup√©ration du classement complet
    dico_classement = list(bot_SwagBank.getClassement().items())

    #Subdivision du dictionnaire en sous-liste de taille √©quitable
    chucks_classement = list(chucks(dico_classement,Personne_par_message))

    #R√©cup√©ration du nombre de message n√©cessaire pour √©crire tout le classement (c'est le nombre de sous-listes)
    nbr_pages = math.ceil(len(dico_classement) / Personne_par_message)

    #On compte le nombre de message post√© dans le $wag forbes
    nbr_message_in_channel = 0
    async for message in channelForbes.history(oldest_first=True):
        nbr_message_in_channel+=1

    #Si le nombre de message du canal est plus pet√Æt que le nombre message n√©cessaire pour √©crire le classement
    if nbr_message_in_channel < nbr_pages: # Il faut √©crire un nouveau message
        Message = "Nouvelle page de classement en cours d'√©criture"
        nouveau_message = await channelForbes.send(Message) #√©criture du nouveau message temporaire

    #√©dition des messages pour mettre √† jour le classement
    cpt_message=0
    async for message in channelForbes.history(oldest_first=True):
        await message.edit(content=mini_forbes_swag(chucks_classement[cpt_message],cpt_message+1,guild))
        cpt_message+=1
    
    #update des bonus de st$le
    bot_SwagBank.updateBonusGrowthRate()
    #update du r√¥le du "Bobby $wag"
    await updateTheSwaggest(guild)

async def updateTheSwaggest(guild):
    """Met √† jour l'attribution du r√¥le "Le Bobby $wag"

    Args:
        guild (Guild): Serveur discord (inutile car c'est uniquement pour la Bobbycratie pour le moment)

    Returns:
        void
    """

    username_swaggest = bot_SwagBank.getTheNewSwaggest() #R√©cup√©ration du nouveau premier au classement
    if username_swaggest == bot_SwagBank.theSwaggest or guild.id != GUILD_ID_BOBBYCRATIE: #La gestion de r√¥le n'est qu'en bobbycratie
        return #rien ne se passe si le plus riche est toujours le m√™me
    
    bot_SwagBank.theSwaggest = username_swaggest #Mise √† jour du plus riche dans $wagBank

    #R√©cup√©ration de l'objet User du plus $wag
    member = discord.utils.get(guild.members, name=username_swaggest.split("#")[0], discriminator = username_swaggest.split("#")[1])

    if member == None: # Si l'utilisateur n'existe pas, alors ne rien faire
        return
    #get the role
    role_swag = guild.get_role(ROLE_ID_BOBBY_SWAG)
    #get the older swaggest
    older_swaggers = role_swag.members

    #Retirez le r√¥le aux anciens "Bobby $wag"
    for old_swagger in older_swaggers:
        await old_swagger.remove_roles(role_swag,reason="N'est plus le plus $wag")

    #Give the role to the new swagger
    await member.add_roles(role_swag,reason="Est maintenant devenu le plus $wag !")

############################## Fonctions ajout√© pour le $tyle ################################

async def update_the_style(): #appel√© toute les heures
    """ Appel√©e de mani√®re p√©riodique en fonction des param√®tres choisi dans la fonction "on_ready"
        Permet de faire gagner du $tyle √† tout les utilisateurs qui ont bloqu√© leurs $wag, et d√©bloque les comptes d√©blocables
    """

    bobbycratie_guild = client.get_guild(id=GUILD_ID_BOBBYCRATIE)
    command_channel = client.get_channel(id=COMMAND_CHANNEL_ID_BOBBYCRATIE)

    ## Faire gagner du style √† ceux qui ont du swag bloqu√© :
    bot_SwagBank.everyoneEarnStyle()

    for account_name in bot_SwagBank.getListOfAccount():
        if bot_SwagBank.isBlockingSwag(account_name):
            #On essaye de d√©bloquer le comptes. Cela sera refus√© syst√©matiquement si le blocage n'est pas termin√©
            try:
                blockedSwag = bot_SwagBank.getBlokedSwag(account_name)
                bot_SwagBank.deblockSwag(account_name)
                member = getGuildMemberName(account_name,bobbycratie_guild,False)
                Message = member.mention +", les `" + str(blockedSwag) + "$wag` que vous aviez bloqu√© sont √† nouveau disponible. Continuer d'en bloquer pour gagner plus de $tyle !" 
                await command_channel.send(Message)
            except(swag.StyleStillBlocked):
                #Si le blocage n'est pas termin√©, on fait R fr√®r
                pass
            
    await updateForbesClassement(bobbycratie_guild) #Mise √† jour du classement apr√®s les gains de $tyle

############################## Fonctions pour messages interactifs ###########################

async def reaction_message_building(lst_to_show, message_user,fonction_message_builder):
    """ Utilis√© par toutes les fonctionnalit√©s du bot (Jukebox et $wag)
        Permet de cr√©er un message interactif avec des r√©actions, pour pouvoir naviguer entre une √©norme liste
        d'√©l√©ment quelconque.

    Args:
        lst_to_show (lst): La grande liste de chose √† afficher, qui sera subdiviser en sous-liste
        message_user (Message): Le message de l'utilisateur qui a demand√© l'affichage de ce message interactif
        fonction_message_builder (Function): Fonction √† appel√© pour la cr√©ation du message appropri√© pour chaque sous-liste de lst_to_shw.
        Par convention, cette fonction doit commencer par "mini_"

    Returns:
        Message: Le message interractif
    """
    sound_per_page = 15
    chucks_sounds = list(chucks(lst_to_show,sound_per_page))
    nbr_pages = math.ceil(len(lst_to_show) / sound_per_page)
    current_page = 1

    Message = fonction_message_builder(chucks_sounds[current_page-1],current_page,nbr_pages,message_user)

    #Envoie du message cr√©e par la fonction_message_builder, d√©fini en entr√©e.
    message_bot = await message_user.channel.send(Message)

    #Ajout des r√©actions initiale
    await message_bot.add_reaction("‚óÄÔ∏è") 
    await message_bot.add_reaction("‚ñ∂Ô∏è")
    active = True

    def check(reaction, user):
        return user == message_user.author and reaction.message == message_bot and str(reaction.emoji) in ["‚óÄÔ∏è", "‚ñ∂Ô∏è"]

    while active:
        try:
            reaction, user = await client.wait_for("reaction_add", timeout=60, check=check)
        
            #Si l'√©moji suivant est tap√©, on avance d'une page
            if str(reaction.emoji) == "‚ñ∂Ô∏è" and current_page != nbr_pages:
                current_page += 1
                await message_bot.edit(content=fonction_message_builder(chucks_sounds[current_page-1],current_page,nbr_pages,message_user))

            #Si l'√©moji pr√©c√©dent est tap√©, on recule d'une page
            elif str(reaction.emoji) == "‚óÄÔ∏è" and current_page > 1:
                current_page -= 1
                await message_bot.edit(content=fonction_message_builder(chucks_sounds[current_page-1],current_page,nbr_pages,message_user))
                
            #On retire la r√©action faites par l'utilisateur
            await message_bot.remove_reaction(reaction, user)
        #Pass√© le time out d√©fini dans le client.wait_for, on emp√™che les gens de continuer de naviguer.
        except asyncio.TimeoutError:
            await message_bot.clear_reactions()
            active = False

def mini_help_message_string(sub_soundlst,current_page,nbr_pages, message_user = None):
    """ Fonction utilis√© par la fonctionnalit√© du Jukebox
        Appel√©e lorsqu'on veut afficher un message d'aide pour l'affichage du catalogue est son disponible en fonction de la commande

    Args:
        sub_soundlst (lst): sous-liste de son
        current_page (int): La page courante, utilis√© pour l'afficher en bas du message
        nbr_pages (int): Le nombre de page total, utilis√© pour l'afficher en bas du message
        message_user ([type], optional): Ce param√®tre n'a aucune incidence ici. Defaults to None.

    Returns:
        String: Une cha√Æne de caract√®re correspondant √† un message d'aide pour le jukebox
    """
    Message =  "Voici tout ce que j'ai par rapport √† la commande que tu as tapp√© <:cozmo:774656738469216287>\n"
    Message += "√Ä toi de choisir le son de ton choix <:ris:800855908859117648>```fix\n"
    Message += well_agligned_jukebox_tab(sub_soundlst,"","")
    Message += "Page " + str(current_page) + "/" + str(nbr_pages) + "\n```"

    return Message

def mini_history_swag_message(chuck_transaction,current_page,nbr_pages,message_user):
    """ Fonction utilis√© pour la fonctionnalit√© du $wag
        Appel√©e lorsqu'on veut afficher une partie de l'historique des transactions du $wag ou de $tyle

    Args:
        chuck_transaction (lst): sous-liste de transaction
        current_page (int): La page courante, utilis√© pour l'afficher en bas du message
        nbr_pages (int): Le nombre de page total, utilis√© pour l'afficher en bas du message
        message_user (Message): Message de l'utilisateur qui a demand√© l'affichage de l'historique

    Returns:
        String : message √† envoyer pour visualiser une sous-partie de l'historique
    """

    #Besoin de conna√Ætre la valeur de swag la plus grande et le nom d'utilisateur le plus grand parmis
    #l'ensemble de la sous liste pour un affichage au top
    maxTailleValeur = 0
    maxTailleNom = 0
    for transaction in chuck_transaction:
        tailleValeur = len(formatNumber(transaction[2]))
        tailleNom = len(getGuildMemberName(transaction[1],message_user.guild))

        if tailleValeur > maxTailleValeur:
            maxTailleValeur = tailleValeur
        
        if tailleNom > maxTailleNom:
            maxTailleNom = tailleNom

    #On regarde si la transaction contient la partie "currency"
    if len(transaction) == 4:
        currency = transaction[3]
    else:
        currency = "$wag"

    #√âcriture du message
    Message = "```ini\n" #on met ini pour la couleur
    for transaction in chuck_transaction:
        if transaction[0] == swag.SwagBank.account.history_movement.GIVE_TO:
            Message += "[ -->"
        else:
            Message += "[ <--"
        Message += "\t" + formatNumber(transaction[2]).ljust(maxTailleValeur) + " "+currency+"\t" + getGuildMemberName(transaction[1],message_user.guild).rjust(maxTailleNom) + "]\n"
    Message += "[Page " + str(current_page) + "/" + str(nbr_pages) + "]\n```"
    return Message

def mini_forbes_swag(chuck_classement,nbr_pages,guild):
    """ Fonction utilis√© pour la fonctionnalit√© du $wag 
        Appel√© pour construire des parties du classement forbes sous forme de String

    Args:
        chuck_classement (lst): sous-liste d'une partie du classement
        nbr_pages (int): Nombre de page totale du classement
        guild (Guild): Guilde o√π est affich√© le classement

    Returns:
        String: message √† envoyer pour visualiser une partie du classement
    """

    #Besoin de conna√Ætre le nom, la valeur de $wag, et la valeur de $tyle le plus long pour l'aligement de chaque colonne
    max_carac = 0
    max_number = 0
    max_style = 0
    for rang in chuck_classement:
        nomDuCompte = rang[0]
        swagEnCompte = rang[1]
        styleEnCompte = round(bot_SwagBank.getStyleBalanceOf(nomDuCompte),3)
        tailleNom = len(getGuildMemberName(nomDuCompte,guild))
        tailleNombre = len(formatNumber(swagEnCompte))
        tailleStyle = len(formatNumber(styleEnCompte))
        if tailleNom > max_carac:
            max_carac = tailleNom
        if tailleNombre > max_number:
            max_number = tailleNombre
        if tailleStyle > max_style:
            max_style = tailleStyle

    Message = "```ini\n"
    cpt = 1 + ((nbr_pages-1)*15)
    dico_medal = {1:" ü•á]",2:" ü•à]",3:" ü•â]"}
    for rang in chuck_classement:
        nomDuCompte = rang[0]
        swagEnCompte = rang[1]
        styleEnCompte = round(bot_SwagBank.getStyleBalanceOf(nomDuCompte),3) #Arrondissement du $tyle √† 3 d√©cimales
        Message += "[#"+ str(cpt).zfill(2)
        Message += dico_medal.get(cpt," "+random.choice(EMOJI_NUL)+"]") #Ajoute une m√©daille si jamais le compteur est √† 1, 2 ou 3
        Message += "\t" + getGuildMemberName(nomDuCompte,guild).ljust(max_carac) + "\t" +formatNumber(swagEnCompte).rjust(max_number) + " $wag\t" +"#"+formatNumber(styleEnCompte).rjust(max_style)+" $tyle"
        if bot_SwagBank.isBlockingSwag(nomDuCompte):
            Message += " üîí"
        Message += "\n"
        cpt+=1
    Message += "\n```"
    return Message

############################## √âv√®nements Bot ################################################

@client.event
async def on_ready():
    """ Fonction lanc√© lorsque le bot se lance.
        Utilis√© pour programmer les fonctions r√©currentes, comme la mise √† jour du $tyle
    """
    await client.change_presence(status=discord.Status.online)
    print('Le bot est loggu√© avec les id {0.user}'.format(client))

    print("Mise √† jour du classement et des bonus de blocage\n\n")
    await updateForbesClassement(client.get_guild(GUILD_ID_BOBBYCRATIE))

    print("Lancement des commandes p√©riodiques\n\n")

    print("G√©n√©ration du style toute les heures...\n")

    scheduler = AsyncIOScheduler()
    scheduler.add_job(update_the_style,CronTrigger(hour='*')) #La fonction update_the_style, est programm√© pour toute les heures
    #scheduler.add_job(update_the_style,CronTrigger(hour=*)) #Toute les 10 secondes (test uniquement)
    scheduler.start()

    print("Bybbot op√©rationnel !")

@client.event
async def on_disconnect():
    """Fonction lanc√© lorsque le bot se d√©connecte
    """
    await client.change_presence(status=discord.Status.offline)

@client.event
async def on_voice_state_update(member, before, after):
    """ Fonction appel√© lorsque n'importe quel membre d'un serveur o√π le bot est pr√©sent change de statut vocal
        (Changer de canal vocal, de d√©connecter d'un canal vocal, se connecter d'un canal vocal, se mute etc...)
        
        Utilis√©e pour deconnecter automatiquement le bot si il se retrouve tout seul

    Args:
        member (Member): Le membre qui vient de changer de statut vocal
        before ([type]): L'ancien statut vocal du membre
        after ([type]) : Le nouveau statut vocal
    """
    if before == after: ## Si l'utilisateur reste au m√™me endroit, pas besoin de faire quoi que ce soit
        return
    else:
        if client.voice_clients: # si le bot est connect√© √† des voices chat
            for botChan in client.voice_clients: # on v√©rifie, dans tout les channels vocaux o√π le bot est pr√©sent, si le bot est tout seul
                if before.channel == botChan.channel and len(botChan.channel.members) == 1: #un gars est parti et le bot est tout seul
                    await botChan.disconnect()

@client.event
async def on_message(message):
    """ Fonction appel√© √† chaque fois qu'un message est envoy√© sur un serveur o√π celui-ci est connect√©
        C'est ici qu'il d√©tecte et traite les diff√©rentes commandes

    Args:
        message (Message): Le message qui a activ√© le bot

    """

    #Si le message vient du bot lui m√™me, on ne fait rien
    if message.author == client.user:
        return

    #Commandes li√©es au $wag
    if message.content.startswith("!$wag"):
        command_swag = message.content.split()

        if len(command_swag) > 1:
            
            if 'cr√©er' in command_swag:
                try:
                    bot_SwagBank.addAccount(str(message.author))
                    Message = "Bienvenue chez $wagBank‚Ñ¢ " + message.author.mention +" !\n\n"
                    Message += "Tu peux maintenant miner du $wag avec la commande `!$wag miner` üí∞"
                    await message.channel.send(Message)
                except(swag.AccountAlreadyExist):
                    Message = message.author.mention +", tu poss√®des d√©j√† un compte chez $wagBank‚Ñ¢ !"
                    await message.channel.send(Message)
                return

            try:
                if 'miner' in command_swag:
                    try:
                        mining_booty = bot_SwagBank.mine(str(message.author))
                        Message = "‚õè " + message.author.mention + " a min√© : " + "`"+formatNumber(mining_booty)+"$wag` !"
                        await message.channel.send(Message)
                        await updateForbesClassement(message.guild)
                    except(swag.AlreadyMineToday):
                        Message = "D√©sol√© " + message.author.mention + " mais tu as d√©j√† min√© du $wag aujourd'hui üòÆ ! Reviens donc demain !"
                        await message.channel.send(Message)
                    return

                if 'solde' in command_swag:
                    montant_swag = bot_SwagBank.getBalanceOf(str(message.author))
                    Message =  "```diff\n+$wag de " + message.author.display_name + " : " + formatNumber(montant_swag) + "\n```"
                    await message.channel.send(Message)
                    return

                if 'historique' in command_swag:
                    history = bot_SwagBank.getHistory(str(message.author))
                    Message = message.author.mention + ", voici l'historique de tes transactions de $wag :\n"
                    await message.channel.send(Message)
                    await reaction_message_building(history,message,mini_history_swag_message)
                    return
                
                if 'payer' in command_swag:

                    try:

                        #R√©cup√©ration du destinataire
                        destinataire = message.mentions
                        if len(destinataire) != 1:
                            Message = "Merci de mentionner un destinataire (@Bobby Machin) pour lui donner de ton $wag !"
                            await message.channel.send(Message)
                            return

                        #R√©cup√©ration de la valeur envoy√©
                        valeur = [argent for argent in command_swag if argent.isnumeric()]
                        if len(valeur) != 1:
                            raise swag.InvalidValue

                        #envoie du swag
                        try:
                            bot_SwagBank.giveSwag(str(message.author),str(destinataire[0]),int(valeur[0]))
                            Message = "Transaction effectu√© avec succ√®s ! \n```ini\n["+ message.author.display_name + "\t" + formatNumber(int(valeur[0])) + " $wag\t-->\t" + destinataire[0].display_name + "]\n```"
                            await message.channel.send(Message)
                            await updateForbesClassement(message.guild)
                            return
                        except(swag.NotEnoughSwagInBalance):
                            Message = message.author.mention + " ! Tu ne poss√®des pas assez de $wag pour faire cette transaction, v√©rifie ton solde avec `!$wag solde`"
                            await message.channel.send(Message)
                            return
                    except(swag.InvalidValue):
                        Message = message.author.mention +", la valeur que tu as √©crite est incorrecte, elle doit √™tre sup√©rieur √† 0 et enti√®re, car le $wag est **indivisible** !"
                        await message.channel.send(Message)
                        return
            except(swag.NoAccountRegistered) as e:
                no_account_guy = "NO_NAME"
                if e.name == str(message.author):
                    no_account_guy = message.author.mention
                elif e.name == str(destinataire[0]):
                    no_account_guy = destinataire[0]
                Message = no_account_guy + ", tu ne poss√®des pas de compte chez $wagBank‚Ñ¢ <:rip:817165391846703114> !"
                Message +="\n\nRem√©die √† ce probl√®me en lan√ßant la commande `!$wag cr√©er` et devient v√©ritablement $wag üòé!"
                await message.channel.send(Message)
                return

        
        #Si l'utilisateur se trompe de commande, ce message s'envoie par d√©faut
        Message = message.author.mention + ", tu sembles perdu, voici les commandes que tu peux utiliser avec ton $wag :\n"
        Message += "```HTTP\n"
        Message += "!$wag cr√©er ~~ Cr√©e un compte chez $wagBank‚Ñ¢\n"
        Message += "!$wag solde ~~ Voir ton solde de $wag sur ton compte\n"
        Message += "!$wag miner ~~ Gagner du $wag gratuitement tout les jours\n"
        Message += "!$wag payer [montant] [@destinataire] ~~ Envoie un *montant* de $wag au *destinataire* sp√©cifi√©\n"
        Message += "!$wag historique ~~ Visualiser l'ensemble des transactions effectu√©es sur ton compte\n"
        Message +="```"
        await message.channel.send(Message)
        await updateForbesClassement(message.guild)

    #Commande li√©es au $tyle
    if message.content.startswith("!$tyle"):
        command_style = message.content.split()

        if len(command_style) > 1:
            try:
                if 'info' in command_style:
                    montant_style = bot_SwagBank.getStyleBalanceOf(str(message.author))
                    Message =  "```diff\n+$tyle de " + message.author.display_name + " : " + formatNumber(montant_style) + "\n"
                    Message += "-Taux de bloquage : " + formatNumber(bot_SwagBank.getStyleTotalGrowthRate(str(message.author))) +"%\n"
                    Message += "-$wag actuellement bloqu√© : " + formatNumber(bot_SwagBank.getBlokedSwag(str(message.author))) +"\n"
                    if bot_SwagBank.isBlockingSwag(str(message.author)):
                        Message += "-Date du d√©blocage sur $wag : " + str(bot_SwagBank.getDateOfUnblockingSwag(str(message.author))) + "\n" #TODO : Changer l'affichage pour avoir une affichage √† la bonne heure, et en fran√ßais
                    Message += "```"
                    await message.channel.send(Message)
                    return

                if 'bloquer' in command_style:
                    try:
                        #R√©cup√©ration de la valeur envoy√©
                        valeur = [argent for argent in command_style if argent.isnumeric()]
                        if len(valeur) != 1:
                            raise swag.InvalidValue

                        bot_SwagBank.blockSwagToGetStyle(str(message.author),int(valeur[0]))
                        Message = message.author.mention + ", vous venez de bloquer `" + formatNumber(int(valeur[0])) + "$wag` vous les r√©cup√©rerez dans **" + str(swag.TIME_OF_BLOCK) + " jours** √† la m√™me heure\n"
                        await message.channel.send(Message)
                        await updateForbesClassement(message.guild)
                        return
                    except(swag.InvalidValue, swag.NotEnoughSwagInBalance,swag.StyleStillBlocked) as e:
                        if isinstance(e,swag.InvalidValue):
                            Message = message.author.mention +", la valeur que tu as √©crite est incorrecte, elle doit √™tre sup√©rieur √† 0 et enti√®re, car le $wag est **indivisible** !"
                        elif isinstance(e,swag.NotEnoughSwagInBalance):
                            Message = message.author.mention + " ! Tu ne poss√®des pas assez de $wag pour faire cette transaction, v√©rifie ton solde avec `!$wag solde`"
                        elif isinstance(e,swag.StyleStillBlocked):
                            Message = message.author.mention +", du $wag est d√©j√† bloqu√© √† ton compte chez $tyle Generatoc Inc. ! Attends leurs d√©blocage pour pouvoir en bloquer de nouveau !"
                        await message.channel.send(Message)
                        return

                if 'payer' in command_style:
                    try:
                        #R√©cup√©ration du destinataire
                        destinataire = message.mentions
                        if len(destinataire) != 1:
                            Message = "Merci de mentionner un destinataire (@Bobby Machin) pour lui donner de ton $tyle !"
                            await message.channel.send(Message)
                            return

                        #R√©cup√©ration de la valeur envoy√©
                        valeur = [argent for argent in command_style if argent.replace(".","").replace(",","").isnumeric()]
                        if len(valeur) != 1:
                            raise swag.InvalidValue

                        #envoie du style
                        try:
                            bot_SwagBank.giveStyle(str(message.author),str(destinataire[0]),float(valeur[0]))
                            Message = "Transaction effectu√© avec succ√®s ! \n```ini\n["+ message.author.display_name + "\t" + formatNumber(float(valeur[0])) + " $tyle\t-->\t" + destinataire[0].display_name + "]\n```"
                            await message.channel.send(Message)
                            await updateForbesClassement(message.guild)
                            return
                        except(swag.NotEnoughStyleInBalance):
                            Message = message.author.mention + " ! Tu ne poss√®des pas assez de $tyle pour faire cette transaction, v√©rifie ton solde avec `!$tyle solde`"
                            await message.channel.send(Message)
                            return
                    except(swag.InvalidValue):
                        Message = message.author.mention +", la valeur que tu as √©crite est incorrecte, elle doit √™tre sup√©rieur √† 0, car le $tyle est **toujours positif** !"
                        await message.channel.send(Message)
                        return
            except (swag.NoAccountRegistered) as e:
                no_account_guy = "NO_NAME"
                if e.name == str(message.author):
                    no_account_guy = message.author.mention
                elif e.name == str(destinataire[0]):
                    no_account_guy = destinataire[0]
                Message = no_account_guy + ", tu ne poss√®des pas de compte chez $wagBank‚Ñ¢ <:rip:817165391846703114> !"
                Message +="\n\nRem√©die √† ce probl√®me en lan√ßant la commande `!$wag cr√©er` et devient v√©ritablement $wag üòé!"
                await message.channel.send(Message)
                return

        Message = message.author.mention + ", tu sembles perdu, voici les commandes que tu peux utiliser avec en relation avec ton $tyle :\n"
        Message += "```HTTP\n"
        Message += "!$tyle info ~~ Voir ton solde de $tyle, ton bonus de bloquage, le $wag que tu as bloqu√©, et la date de d√©blocage \n"
        Message += "!$tyle payer [montant] [@destinataire] ~~ Envoie un *montant* de $tyle au *destinataire* sp√©cifi√©\n"
        Message += "!$tyle bloquer [montant] ~~ Bloque un *montant* de $wag pour g√©n√©rer du $tyle pendant quelques jours\n"
        Message +="```"
        await message.channel.send(Message)


    #Commandes li√©es aux Jukebox (aoe, war3, kaa etc...)
    if message.content.startswith(bot_jukebox.command_tuple):

        ##Channel finding
        if message.author.voice == None:
            await message.channel.send("Hey ! Connecte toi sur un canal vocal avant de m'importuner !")
            return
        chanToGo = message.author.voice.channel

        ##Command Processing
        commande = message.content.split(maxsplit=1)

        file_path, searchResult, search_code_success = bot_jukebox.searchWithTheCommand(commande[0][1:],commande[1])

        # Gestion des erreurs
        if search_code_success == jukebox.code_recherche.NO_RESULT:
            await message.channel.send("Aucun son n'a √©t√© trouv√© <:rip:817165391846703114> Essaye avec d'autres mots/Tags !")
            return

        if search_code_success == jukebox.code_recherche.SOME_RESULT:
            Message = "Waa ! Voici ce que j'ai en stock <:charlieKane:771392220430860288> \n```fix\n"
            Message += well_agligned_jukebox_tab(searchResult,"","")
            Message += "```\nSois plus pr√©cis pour lancer le bon son ! :notes:"
            await message.channel.send(Message)
            return

        if search_code_success == jukebox.code_recherche.TOO_MANY_RESULT:
            Message = "Waa ! J'ai trop de son qui correspondent √† ce que tu as demand√© ! <:gniknoht:781090046366187540> \n```diff\n"
            Message += well_agligned_jukebox_tab(searchResult[:15],"-","")
            Message += "...et encore " + str(len(searchResult) - 15) + " autres !```\nSois plus pr√©cis, n'h√©site pas √† utiliser les **tags** <:hellguy:809774898665881610> !"
            await message.channel.send(Message)
            return

        if search_code_success == jukebox.code_recherche.REQUEST_HELP:
            await reaction_message_building(searchResult,message,mini_help_message_string)
            return

        if search_code_success == jukebox.code_recherche.ONE_RESULT:
            Message = "Lancement du son :radio: :musical_note:\n```bash\n" + well_agligned_jukebox_tab(searchResult,'"','"') + "```"
            await message.channel.send(Message)

        fileToPlay = file_path

        vc = await connect_to_chan(chanToGo)

        #Si un autre son est actuellement entrain d'√™tre jou√©, on endors le tread pendant 1 secondes
        while vc.is_playing():
            time.sleep(1)

        #Lorsque aucun son n'est jou√© dans le canal vocal actuel, on lance le son !
        if not vc.is_playing():
            soundToPlay = discord.FFmpegPCMAudio(fileToPlay)
            vc.play(soundToPlay, after = None)


import json

with open("bot_token.json","r") as json_file:
    client_config = json.load(json_file)

#Lancement du client
client.run(client_config.get("token"))